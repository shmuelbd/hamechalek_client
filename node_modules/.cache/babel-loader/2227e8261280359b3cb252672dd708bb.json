{"ast":null,"code":"import * as React from 'react';\nimport { classNames, mergeProps } from 'primereact/utils';\nimport { ComponentBase } from 'primereact/componentbase';\nimport { PrimeReactContext } from 'primereact/api';\nvar ProgressBarBase = ComponentBase.extend({\n  defaultProps: {\n    __TYPE: 'ProgressBar',\n    id: null,\n    value: null,\n    showValue: true,\n    unit: '%',\n    style: null,\n    className: null,\n    mode: 'determinate',\n    displayValueTemplate: null,\n    color: null,\n    children: undefined\n  }\n});\nvar ProgressBar = /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(function (inProps, ref) {\n  var context = React.useContext(PrimeReactContext);\n  var props = ProgressBarBase.getProps(inProps, context);\n  var _ProgressBarBase$setM = ProgressBarBase.setMetaData({\n      props: props\n    }),\n    ptm = _ProgressBarBase$setM.ptm;\n  var elementRef = React.useRef(null);\n  var createLabel = function createLabel() {\n    if (props.showValue && props.value != null) {\n      var label = props.displayValueTemplate ? props.displayValueTemplate(props.value) : props.value + props.unit;\n      return label;\n    }\n    return null;\n  };\n  var createDeterminate = function createDeterminate() {\n    var className = classNames('p-progressbar p-component p-progressbar-determinate', props.className);\n    var label = createLabel();\n    var rootProps = mergeProps({\n      id: props.id,\n      ref: elementRef,\n      className: className,\n      style: props.style,\n      role: 'progressbar',\n      'aria-valuemin': '0',\n      'aria-valuenow': props.value,\n      'aria-valuemax': '100'\n    }, ProgressBarBase.getOtherProps(props), ptm('root'));\n    var valueProps = mergeProps({\n      className: 'p-progressbar-value p-progressbar-value-animate',\n      style: {\n        width: props.value + '%',\n        display: 'flex',\n        backgroundColor: props.color\n      }\n    }, ptm('value'));\n    var labelProps = mergeProps({\n      className: 'p-progressbar-label'\n    }, ptm('label'));\n    return /*#__PURE__*/React.createElement(\"div\", rootProps, /*#__PURE__*/React.createElement(\"div\", valueProps, props.value != null && props.value !== 0 && props.showValue && /*#__PURE__*/React.createElement(\"div\", labelProps, label)));\n  };\n  var createIndeterminate = function createIndeterminate() {\n    var className = classNames('p-progressbar p-component p-progressbar-indeterminate', props.className);\n    var rootProps = mergeProps({\n      id: props.id,\n      ref: elementRef,\n      className: className,\n      style: props.style,\n      role: 'progressbar'\n    }, ProgressBarBase.getOtherProps(props), ptm('root'));\n    var indeterminateContainerProps = mergeProps({\n      className: 'p-progressbar-indeterminate-container'\n    }, ptm('indeterminateContainer'));\n    var valueProps = mergeProps({\n      className: 'p-progressbar-value p-progressbar-value-animate',\n      style: {\n        backgroundColor: props.color\n      }\n    }, ptm('value'));\n    return /*#__PURE__*/React.createElement(\"div\", rootProps, /*#__PURE__*/React.createElement(\"div\", indeterminateContainerProps, /*#__PURE__*/React.createElement(\"div\", valueProps)));\n  };\n  React.useImperativeHandle(ref, function () {\n    return {\n      props: props,\n      getElement: function getElement() {\n        return elementRef.current;\n      }\n    };\n  });\n  if (props.mode === 'determinate') return createDeterminate();else if (props.mode === 'indeterminate') return createIndeterminate();else throw new Error(props.mode + \" is not a valid mode for the ProgressBar. Valid values are 'determinate' and 'indeterminate'\");\n}));\nProgressBar.displayName = 'ProgressBar';\nexport { ProgressBar };","map":null,"metadata":{},"sourceType":"module"}